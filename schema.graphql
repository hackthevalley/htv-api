enum form_types{
    TEXT
    TEXTAREA
    CHECKBOX
    MULTI_CHECKBOX
}
enum status{
    PENDING
    WAITLISTED
    ACCEPTED
    DECLINED
    REJECTED
}
enum gender{
    MALE
    FEMALE
    UNDEFINED
}

type Link{
    label: String
    url: String!
}

input LinkInput{
    label: String
    url: String!
}

type Question {
    id: String!
    title: String!
    info: String!
    options: [String!]!
    default: String!
    type:form_types!
    required: Boolean!
}

input QuestionInput{
    id: String!
    title: String!
    info: String!
    options: [String!]!
    default: String!
    type:form_types!
    required: Boolean!
}

type Date{
    day: Int!
    month: Int!
    year: Int!
}

input DateInput{
    day: Int!
    month: Int!
    year: Int!
}

type Response{
    question: Question!
    answer: [String!]!
}

input ResponseInput{
    question: QuestionInput!
    answer: [String!]!
}

type User{
    id: String!
    links: [Link]
    status: status!
    email: String!
    firstname: String!
    lastname: String!
    gender:gender!
    school: String!
    bio: String!
    photo: String!
    created_at: Date!
}

type Application{
    id: String!
    created_at: Date!
    updated_at: Date!
    form: Form!
    user: User!
    responses: [Response]!
}

type Form{
    id: String!
    title: String!
    questions: [Question]!
    open: Boolean!
    ends_at: Date!
    created_at: Date!
}

input CreateUser{
    email: String!
    firstname: String
    lastname: String
    gender: gender
    school: String
    bio: String
    photo: String
    links: [LinkInput]
}

input UpdateUser{
    status: status
    email: String
    firstname: String
    lastname: String
    gender:gender
    school: String
    bio: String
    photo: String
    links: [LinkInput]
}

input CreateForm{
    title: String!
    open: Boolean!
    ends_at: DateInput!
}

input UpdateForm{
    id: String!
    title: String!
    questions: [QuestionInput!]!
    open: Boolean!
    ends_at: DateInput!
}

type Query{
    # id takes priority if both provided
    readUser(email: String, id: String): User!
    readApp(id: String!):Application!
    readForm(id: String!):Form!
}

type Mutation{
    createUser(input: CreateUser!): User!
    updateUser(input: UpdateUser!): User!
    deleteUser(id: String!): User!
    createApp(form: String!, user: String!):Application!
    updateApp(id: String!, responses: [ResponseInput!]):Application!
    deleteApp(id: String!):Application!
    createForm(input:CreateForm!):Form!
    updateForm(input:UpdateForm!):Form!
    deleteForm(id: String!):Form!
}