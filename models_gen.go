// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package htv_api

import (
	"fmt"
	"io"
	"strconv"
)

type Application struct {
	ID        string      `json:"id"`
	CreatedAt *Date       `json:"created_at"`
	UpdatedAt *Date       `json:"updated_at"`
	Form      *Form       `json:"form"`
	User      *User       `json:"user"`
	Responses []*Response `json:"responses"`
}

type CreateForm struct {
	Title  string     `json:"title"`
	Open   bool       `json:"open"`
	EndsAt *DateInput `json:"ends_at"`
}

type CreateUser struct {
	Email     string       `json:"email"`
	Firstname *string      `json:"firstname"`
	Lastname  *string      `json:"lastname"`
	Gender    *Gender      `json:"gender"`
	School    *string      `json:"school"`
	Bio       *string      `json:"bio"`
	Photo     *string      `json:"photo"`
	Links     []*LinkInput `json:"links"`
}

type Date struct {
	Day   int `json:"day"`
	Month int `json:"month"`
	Year  int `json:"year"`
}

type DateInput struct {
	Day   int `json:"day"`
	Month int `json:"month"`
	Year  int `json:"year"`
}

type Form struct {
	ID        string      `json:"id"`
	Title     string      `json:"title"`
	Questions []*Question `json:"questions"`
	Open      bool        `json:"open"`
	EndsAt    *Date       `json:"ends_at"`
	CreatedAt *Date       `json:"created_at"`
}

type Link struct {
	Label *string `json:"label"`
	URL   string  `json:"url"`
}

type LinkInput struct {
	Label *string `json:"label"`
	URL   string  `json:"url"`
}

type Question struct {
	ID       string    `json:"id"`
	Title    string    `json:"title"`
	Info     string    `json:"info"`
	Options  []string  `json:"options"`
	Default  string    `json:"default"`
	Type     FormTypes `json:"type"`
	Required bool      `json:"required"`
}

type QuestionInput struct {
	ID       string    `json:"id"`
	Title    string    `json:"title"`
	Info     string    `json:"info"`
	Options  []string  `json:"options"`
	Default  string    `json:"default"`
	Type     FormTypes `json:"type"`
	Required bool      `json:"required"`
}

type Response struct {
	Question *Question `json:"question"`
	Answer   []string  `json:"answer"`
}

type ResponseInput struct {
	Question *QuestionInput `json:"question"`
	Answer   []string       `json:"answer"`
}

type UpdateForm struct {
	ID        string           `json:"id"`
	Title     string           `json:"title"`
	Questions []*QuestionInput `json:"questions"`
	Open      bool             `json:"open"`
	EndsAt    *DateInput       `json:"ends_at"`
}

type UpdateUser struct {
	Status    *Status      `json:"status"`
	Email     *string      `json:"email"`
	Firstname *string      `json:"firstname"`
	Lastname  *string      `json:"lastname"`
	Gender    *Gender      `json:"gender"`
	School    *string      `json:"school"`
	Bio       *string      `json:"bio"`
	Photo     *string      `json:"photo"`
	Links     []*LinkInput `json:"links"`
}

type User struct {
	ID        string  `json:"id"`
	Links     []*Link `json:"links"`
	Status    Status  `json:"status"`
	Email     string  `json:"email"`
	Firstname string  `json:"firstname"`
	Lastname  string  `json:"lastname"`
	Gender    Gender  `json:"gender"`
	School    string  `json:"school"`
	Bio       string  `json:"bio"`
	Photo     string  `json:"photo"`
	CreatedAt *Date   `json:"created_at"`
}

type FormTypes string

const (
	FormTypesText          FormTypes = "TEXT"
	FormTypesTextarea      FormTypes = "TEXTAREA"
	FormTypesCheckbox      FormTypes = "CHECKBOX"
	FormTypesMultiCheckbox FormTypes = "MULTI_CHECKBOX"
)

var AllFormTypes = []FormTypes{
	FormTypesText,
	FormTypesTextarea,
	FormTypesCheckbox,
	FormTypesMultiCheckbox,
}

func (e FormTypes) IsValid() bool {
	switch e {
	case FormTypesText, FormTypesTextarea, FormTypesCheckbox, FormTypesMultiCheckbox:
		return true
	}
	return false
}

func (e FormTypes) String() string {
	return string(e)
}

func (e *FormTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FormTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid form_types", str)
	}
	return nil
}

func (e FormTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale      Gender = "MALE"
	GenderFemale    Gender = "FEMALE"
	GenderUndefined Gender = "UNDEFINED"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderUndefined,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderUndefined:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusPending    Status = "PENDING"
	StatusWaitlisted Status = "WAITLISTED"
	StatusAccepted   Status = "ACCEPTED"
	StatusDeclined   Status = "DECLINED"
	StatusRejected   Status = "REJECTED"
)

var AllStatus = []Status{
	StatusPending,
	StatusWaitlisted,
	StatusAccepted,
	StatusDeclined,
	StatusRejected,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusPending, StatusWaitlisted, StatusAccepted, StatusDeclined, StatusRejected:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
